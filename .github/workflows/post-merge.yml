name: üöÄ Post-Merge Testing & Deployment

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["ü§ñ PR Automation & Quality Gates"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  packages: write
  deployments: write
  id-token: write

jobs:
  # 1. Parallel Testing Strategy
  test-matrix:
    name: Parallel Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Test Matrix
        id: set-matrix
        run: |
          # Dynamically generate test matrix based on packages
          PACKAGES=$(find packages -name "package.json" -type f | head -20)
          MATRIX_JSON='{"package":['
          FIRST=true
          
          for pkg in $PACKAGES; do
            PKG_DIR=$(dirname $pkg)
            PKG_NAME=$(basename $PKG_DIR)
            
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              MATRIX_JSON+=','
            fi
            
            MATRIX_JSON+="\"$PKG_DIR\""
          done
          
          MATRIX_JSON+=']}'
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  # 2. Parallel Package Testing
  parallel-tests:
    name: Test - ${{ matrix.package }}
    needs: test-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.test-matrix.outputs.matrix)}}
      max-parallel: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Tests for ${{ matrix.package }}
        run: |
          cd ${{ matrix.package }}
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test -- --passWithNoTests
          else
            echo "No tests found for ${{ matrix.package }}"
          fi

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ${{ matrix.package }}/coverage
          flags: ${{ matrix.package }}
          name: ${{ matrix.package }}
        continue-on-error: true

  # 3. Integration Tests (Parallel)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite:
          - api
          - database
          - auth
          - workflows
          - agents
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10

      - name: Run ${{ matrix.test-suite }} Integration Tests
        run: |
          npm run test:integration:${{ matrix.test-suite }} || echo "No ${{ matrix.test-suite }} tests"

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # 4. Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/api
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Load Testing with k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/load/k6-script.js
          flags: --vus 50 --duration 30s
        continue-on-error: true

  # 5. Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'CAIA'
          path: '.'
          format: 'HTML'
        continue-on-error: true

  # 6. Build and Publish
  build-publish:
    name: Build & Publish
    needs: [parallel-tests, integration-tests]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm ci

      - name: Build All Packages
        run: npm run build:all

      - name: Publish to NPM (if version changed)
        run: |
          npx lerna publish from-package --yes --no-push --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

  # 7. Deploy Documentation
  deploy-docs:
    name: Deploy Documentation
    needs: [parallel-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Documentation
        run: |
          npm ci
          npm run docs:build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api

  # 8. Notification and Metrics
  notify-results:
    name: Notify Results
    needs: [parallel-tests, integration-tests, performance-tests, security-scan, build-publish]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Collect Test Results
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = context.payload.workflow_run?.jobs || [];
            const summary = {
              total: jobs.length,
              passed: jobs.filter(j => j.conclusion === 'success').length,
              failed: jobs.filter(j => j.conclusion === 'failure').length,
              skipped: jobs.filter(j => j.conclusion === 'skipped').length
            };
            
            core.summary
              .addHeading('Post-Merge Test Results')
              .addTable([
                [{data: 'Status', header: true}, {data: 'Count', header: true}],
                ['‚úÖ Passed', summary.passed.toString()],
                ['‚ùå Failed', summary.failed.toString()],
                ['‚è≠Ô∏è Skipped', summary.skipped.toString()],
                ['üìä Total', summary.total.toString()]
              ])
              .write();

      - name: Send Slack Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Post-merge tests failed on main branch!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  # 9. Cleanup and Optimization
  cleanup:
    name: Cleanup
    needs: [notify-results]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            test-results-*
            coverage-*
          failOnError: false

      - name: Update Metrics Dashboard
        run: |
          echo "Updating metrics dashboard..."
          # Implementation for metrics collection