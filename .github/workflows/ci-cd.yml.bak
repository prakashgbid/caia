name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      affected-packages: ${{ steps.changes.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Detect changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npx lerna changed --json > changed.json || echo "[]" > changed.json
          else
            echo "[]" > changed.json
          fi
          
          PACKAGES=$(cat changed.json | jq -r '.[].name' | tr '\n' ' ')
          SHOULD_BUILD="true"
          
          if [[ "${{ github.event_name }}" == "pull_request" && -z "$PACKAGES" ]]; then
            SHOULD_BUILD="false"
          fi
          
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  # Security and quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Audit dependencies
        continue-on-error: true
        run: npm audit --audit-level high

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        continue-on-error: true
        run: npm run format:check

      - name: Type check
        continue-on-error: true
        run: npm run type-check

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-build == 'true'
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Run tests
        run: npm run test:all

  # Build packages
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [preflight, security, test]
    if: needs.preflight.outputs.should-build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Build packages
        run: npm run build:all

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            packages/*/lib
            packages/*/build
          retention-days: 7

  # E2E tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: needs.preflight.outputs.should-build == 'true'
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Run E2E tests
        continue-on-error: true
        run: npm run test:e2e || true

  # Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: github.event_name == 'pull_request' && needs.preflight.outputs.should-build == 'true'
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Run performance benchmarks
        continue-on-error: true
        run: npm run benchmark || echo "No benchmarks configured"

  # Package and publish
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Publish to NPM
        run: npx lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Documentation deployment
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Build documentation
        continue-on-error: true
        run: npm run docs:build || echo "No docs build configured"

      - name: Deploy to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build

  # Cleanup and notifications
  cleanup:
    name: Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: always()
    steps:
      - name: Cleanup complete
        run: echo "Pipeline complete"
