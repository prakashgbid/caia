name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      affected-packages: ${{ steps.changes.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Detect changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npx lerna changed --json > changed.json || echo "[]" > changed.json
          else
            echo "[]" > changed.json
          fi
          
          PACKAGES=$(cat changed.json | jq -r '.[].name' | tr '\n' ' ')
          SHOULD_BUILD="true"
          
          if [[ "${{ github.event_name }}" == "pull_request" && -z "$PACKAGES" ]]; then
            SHOULD_BUILD="false"
          fi
          
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  # Security and quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: pnpm audit --audit-level high

      - name: Lint code
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run type-check

      - name: License check
        run: npx license-checker --production --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC"

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-build == 'true'
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit --coverage

      - name: Run integration tests
        run: pnpm run test:integration

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build packages
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [preflight, security, test]
    if: needs.preflight.outputs.should-build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build:all

      - name: Validate build outputs
        run: ./scripts/validate-build.sh

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            packages/*/lib
            packages/*/build
          retention-days: 7

  # End-to-end tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: needs.preflight.outputs.should-build == 'true'
    strategy:
      matrix:
        scenario: [basic, orchestration, performance]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E tests - ${{ matrix.scenario }}
        run: pnpm run test:e2e:${{ matrix.scenario }}

      - name: Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-artifacts-${{ matrix.scenario }}
          path: |
            test-results/
            screenshots/
            videos/

  # Performance benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: github.event_name == 'pull_request' && needs.preflight.outputs.should-build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance benchmarks
        run: pnpm run benchmark

      - name: Compare with baseline
        run: ./scripts/compare-performance.sh

      - name: Comment performance results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-results.json')) {
              const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));
              const comment = `## Performance Benchmark Results\n\n${results.summary}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Package and publish
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [security, test, build, e2e]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Version packages
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            npx lerna version prerelease --yes --no-git-tag-version
          else
            npx lerna version ${{ github.event.release.tag_name }} --yes --no-git-tag-version
          fi

      - name: Publish to NPM
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            npx lerna publish from-package --yes --dist-tag beta
          else
            npx lerna publish from-package --yes
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release notes
        run: ./scripts/generate-release-notes.sh ${{ github.event.release.tag_name }}

  # Documentation deployment
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build documentation
        run: pnpm run docs:build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build

  # Cleanup and notifications
  cleanup:
    name: Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [security, test, build, e2e, performance, publish, docs]
    if: always()
    steps:
      - name: Cleanup artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(
              artifact => Date.now() - new Date(artifact.created_at).getTime() > 7 * 24 * 60 * 60 * 1000
            );
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            // Notify team on critical failures
            if (context.ref === 'refs/heads/main' || context.eventName === 'release') {
              // Add notification logic here (Slack, email, etc.)
              console.log('Pipeline failed on critical branch/event');
            }